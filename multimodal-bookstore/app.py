
import os
import io
import base64
import random
import uuid
import requests
from PIL import Image
from flask import Flask, render_template, request, jsonify, session
from flask_pymongo import PyMongo
from dotenv import load_dotenv
import secrets
from datetime import timedelta
from bson import ObjectId
from difflib import get_close_matches

# ================== CONFIG ==================
load_dotenv()
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
MONGO_URI = os.environ.get("MONGO_URI")
CLIP_API_URL = os.environ.get("CLIP_API_URL")  # URL CLIP API

app = Flask(__name__, static_folder="static", template_folder="templates")
app.secret_key = secrets.token_hex(16)
app.config["MONGO_URI"] = MONGO_URI
app.config["SESSION_PERMANENT"] = False
mongo = PyMongo(app)

# ================== UTILS ==================
def image_from_base64(data_url):
    if "," in data_url:
        _, b64 = data_url.split(",", 1)
    else:
        b64 = data_url
    return Image.open(io.BytesIO(base64.b64decode(b64)))
def find_book_by_title(text_query, books):
    query_lower = text_query.lower()

    # 1. Regex tr·ª±c ti·∫øp (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    book_match = mongo.db.books.find_one({
        "title": {"$regex": text_query, "$options": "i"}
    })
    if book_match:
        return book_match

    # Chu·∫©n b·ªã danh s√°ch title (lowercase ƒë·ªÉ fuzzy match)
    all_titles = [b["title"] for b in books]
    all_titles_lower = [t.lower() for t in all_titles]

    # 2. Fuzzy match to√†n b·ªô t√™n
    close = get_close_matches(query_lower, all_titles_lower, n=1, cutoff=0.6)
    if close:
        # t√¨m l·∫°i t√™n g·ªëc kh·ªõp lowercase
        idx = all_titles_lower.index(close[0])
        return mongo.db.books.find_one({"title": all_titles[idx]})

    # 3. Fuzzy match t·ª´ng t·ª´
    words = query_lower.split()
    candidates = []
    for word in words:
        close_word = get_close_matches(word, all_titles_lower, n=3, cutoff=0.6)
        candidates.extend(close_word)

    if candidates:
        # ch·ªçn t√™n xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
        best_guess = max(set(candidates), key=candidates.count)
        idx = all_titles_lower.index(best_guess)
        return mongo.db.books.find_one({"title": all_titles[idx]})

    return None
def make_json_safe(obj):
    if isinstance(obj, dict):
        return {k: make_json_safe(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [make_json_safe(i) for i in obj]
    elif isinstance(obj, (str, int, float, bool)) or obj is None:
        return obj
    else:
        return str(obj)

def get_session_data():
    if "data" not in session:
        session["data"] = {}
    return session["data"]

def save_session_data(data):
    session["data"] = data

def clear_session_data():
    session.clear()  # X√≥a to√†n b·ªô session

def get_session_history():
    if "history" not in session:
        session["history"] = [
            {
                "role": "system",
                "content": (
                    "B·∫°n l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng BooksLand, nhi·ªám v·ª• h·ªó tr·ª£ kh√°ch h√†ng t√¨m s√°ch, "
                    "gi·ªõi thi·ªáu s·∫£n ph·∫©m v√† tr·∫£ l·ªùi th√¢n thi·ªán, s√∫c t√≠ch. Lu√¥n x∆∞ng l√† tr·ª£ l√Ω BooksLand."
                )
            }
        ]
    return session["history"]

def add_to_history(role, content):
    history = get_session_history()
    history.append({"role": role, "content": content})
    session["history"] = history

def call_openrouter(messages):
    if not OPENROUTER_API_KEY:
        raise Exception("‚ö†Ô∏è Ch∆∞a c√≥ OPENROUTER_API_KEY trong .env")
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {"model": "openai/gpt-4o-mini", "messages": messages}
    r = requests.post(url, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

# ================== PUSH BOOKS TO CLIP ==================
def push_books_to_clip():
    if not CLIP_API_URL:
        print("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh CLIP_API_URL, b·ªè qua push s√°ch")
        return
    try:
        books = list(mongo.db.books.find())
        for book in books:
            book["_id"] = str(book["_id"])
            book["clip_id"] = str(uuid.uuid4())
        if not books:
            print("‚ö†Ô∏è Mongo ch∆∞a c√≥ s√°ch, b·ªè qua push s√°ch l√™n CLIP")
            return
        resp = requests.post(CLIP_API_URL + "/clip-match-text",
                             json={"query": "dummy", "books": books}, timeout=120)
        if resp.status_code == 200:
            print(f"‚úÖ ƒê√£ push {len(books)} s√°ch l√™n CLIP API th√†nh c√¥ng")
        else:
            print(f"‚ö†Ô∏è L·ªói khi push s√°ch: {resp.status_code}, {resp.text[:200]}")
    except Exception as e:
        print(f"‚ö†Ô∏è Exception khi push s√°ch l√™n CLIP: {e}")

push_books_to_clip()

# ================== ROUTES ==================
@app.route("/api/query", methods=["POST"])
def api_query():
    pil_img = None
    text_query = ""

    # ================== 0. Nh·∫≠n input ==================
    if request.is_json:
        body = request.get_json() or {}
        text_query = (body.get("query") or "").strip()
        if body.get("image"):
            pil_img = image_from_base64(body["image"]).convert("RGB")
    else:
        body = request.form
        text_query = (body.get("query") or "").strip()
        if "file" in request.files:
            pil_img = Image.open(request.files["file"].stream).convert("RGB")

    # ================== 1. Reset session ==================
    if text_query.lower() == "reset":
        clear_session_data()
        return jsonify({"ok": True, "msg": "Session ƒë√£ ƒë∆∞·ª£c reset."})

    # ================== 2. Ph√¢n lo·∫°i input ==================
    input_type = "unknown"
    if pil_img and text_query:
        input_type = "both"
    elif pil_img:
        input_type = "image"
    elif text_query:
        input_type = "text"

    # ================== 3. Load s√°ch t·ª´ Mongo ==================
    books = list(mongo.db.books.find())
    for book in books:
        book["_id"] = str(book["_id"])

    session_data = get_session_data()

    # ================== 4. Helper session ==================
    def update_session_if_new_book(book):
        last_match = session_data.get("last_best_match")
        if not last_match or str(last_match.get("_id")) != str(book.get("_id")):
            session_data["last_best_match"] = make_json_safe(book)
            save_session_data(session_data)

    # ================== 5. Greeting intent ==================
    greetings = ["hi", "hello", "ch√†o", "hey", "xin ch√†o"]
    if text_query.lower() in greetings:
        add_to_history("user", text_query)
        reply = "Ch√†o b·∫°n üëã! M√¨nh l√† tr·ª£ l√Ω BooksLand, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch ho·∫∑c gi·ªõi thi·ªáu s·∫£n ph·∫©m."
        add_to_history("assistant", reply)
        return jsonify({
            "ok": True,
            "reply": reply,
            "cover": None,
            "covers": [],
            "book": None,
            "suggested": []
        })

    # ================== 6. X·ª≠ l√Ω Text-only ==================
    if text_query and not pil_img:
        query_lower = text_query.lower()

        # --- X·ª≠ l√Ω x√°c nh·∫≠n "c√≥" (mua) ---
        confirm_words_yes = ["c√≥", "ƒë√∫ng r·ªìi", "ok", "mua", "chu·∫©n", "ph·∫£i"]
        if query_lower in confirm_words_yes:
            last_book = session_data.get("last_best_match")
            if last_book:
                book_in_store = mongo.db.books.find_one({"_id": ObjectId(last_book["_id"])})
                if book_in_store:
                    book_in_store["_id"] = str(book_in_store["_id"])
                    reply = f"üëç Trong ti·ªám c√≥ b√°n '{book_in_store['title']}' c·ªßa {book_in_store['author']}, gi√° {book_in_store.get('price', 'ch∆∞a c√≥ gi√°')}."
                    return jsonify({
                        "ok": True,
                        "reply": reply,
                        "cover": book_in_store.get("cover"),
                        "covers": [book_in_store.get("cover")] if book_in_store.get("cover") else [],
                        "book": make_json_safe(book_in_store),
                        "suggested": []
                    })
            return jsonify({"ok": False, "reply": "B·∫°n mu·ªën mua s√°ch n√†o nh·ªâ? H√£y ch·ªçn l·∫°i nh√©."})

        # --- X·ª≠ l√Ω x√°c nh·∫≠n "kh√¥ng" ---
        confirm_words_no = ["kh√¥ng", "kh√¥ng mua", "kh√¥ng ph·∫£i", "sai", "nh·∫ßm"]
        if query_lower in confirm_words_no:
            last_suggested = session_data.get("last_suggested", [])
            if last_suggested:
                reply = "Kh√¥ng sao üòä. B·∫°n th·ª≠ xem th√™m m·∫•y cu·ªën n√†y nh√©:"
                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": last_suggested[0].get("cover") if last_suggested[0].get("cover") else None,
                    "covers": [b.get("cover") for b in last_suggested if b.get("cover")],
                    "book": None,
                    "suggested": last_suggested
                })
            return jsonify({"ok": True, "reply": "V·∫≠y m√¨nh c√≥ th·ªÉ g·ª£i √Ω v√†i cu·ªën kh√°c cho b·∫°n kh√¥ng?"})

        # --- X·ª≠ l√Ω h·ªèi gi√° ---
        price_keywords = ["gi√°", "cost", "bao nhi√™u", "m·∫•y ti·ªÅn", "gi√° bao nhi√™u", "nhi√™u"]
        if any(word in query_lower for word in price_keywords):
    # T√¨m s√°ch g·∫ßn gi·ªëng (regex + fuzzy + t·ª´ kh√≥a)
            last_book = session_data.get("last_best_match")
            book_match = find_book_by_title(text_query, books)

            if book_match:
                book_match["_id"] = str(book_match["_id"])
                update_session_if_new_book(book_match)
                session_data["last_suggested"] = [make_json_safe(book_match)]
                save_session_data(session_data)

                reply = f"üìö √ù b·∫°n c√≥ ph·∫£i s√°ch '{book_match['title']}' c·ªßa {book_match.get('author','kh√¥ng r√µ t√°c gi·∫£')}? Gi√° l√† {book_match.get('price', 'ch∆∞a c√≥ gi√°')}."
                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": book_match.get("cover"),
                    "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                    "book": make_json_safe(book_match),
                    "suggested": [book_match]
                })
            elif last_book:
                # Kh√¥ng nh·∫Øc t√™n m·ªõi nh∆∞ng ƒë√£ c√≥ s√°ch tr∆∞·ªõc ƒë√≥ => b√°o gi√° t·ª´ session
                reply = f"üìö S√°ch '{last_book['title']}' c·ªßa {last_book.get('author','kh√¥ng r√µ t√°c gi·∫£')} c√≥ gi√° {last_book.get('price','ch∆∞a c√≥ gi√°')}."
                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": last_book.get("cover"),
                    "covers": [last_book.get("cover")] if last_book.get("cover") else [],
                    "book": make_json_safe(last_book),
                    "suggested": [last_book]
                })
            else:
                return jsonify({
                    "ok": False,
                    "reply": "Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y s√°ch n√†o g·∫ßn gi·ªëng ƒë·ªÉ b√°o gi√°."
                })

        if "c√≥ b√°n" in query_lower or "c√≥ s√°ch" in query_lower or "trong ti·ªám c√≥" in query_lower:
            book_match = find_book_by_title(text_query, books)
            if book_match:
                book_match["_id"] = str(book_match["_id"])
                update_session_if_new_book(book_match)
                reply = f"‚úÖ Trong ti·ªám c√≥ b√°n '{book_match['title']}' c·ªßa {book_match.get('author','kh√¥ng r√µ t√°c gi·∫£')} v·ªõi gi√° {book_match.get('price','ch∆∞a c√≥ gi√°')}."
                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": book_match.get("cover"),
                    "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                    "book": make_json_safe(book_match),
                    "suggested": []
                })
            else:
                suggested = [make_json_safe(b) for b in books[:3]]
                reply = "‚ùå Hi·ªán t·∫°i trong ti·ªám kh√¥ng c√≥ cu·ªën n√†y. B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c s√°ch sau:"
                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": suggested[0].get("cover") if suggested and suggested[0].get("cover") else None,
                    "covers": [b.get("cover") for b in suggested if b.get("cover")],
                    "book": None,
                    "suggested": suggested
                })


    
        

        # --- 1. Regex match tr·ª±c ti·∫øp ---
        book_match = find_book_by_title(text_query, books)


        # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ fuzzy match
        if not book_match:
            all_titles = [b["title"] for b in books]
            close = get_close_matches(text_query, all_titles, n=1, cutoff=0.6)  # 0.6 l√† ng∆∞·ª°ng similarity
            if close:
                book_match = mongo.db.books.find_one({"title": close[0]})

        # --- 3. N·∫øu t√¨m ƒë∆∞·ª£c match (regex ho·∫∑c fuzzy) ---
        if book_match:
            book_match["_id"] = str(book_match["_id"])
            update_session_if_new_book(book_match)
            session_data["last_suggested"] = [make_json_safe(book_match)]
            save_session_data(session_data)

            return jsonify({
                "ok": True,
                "reply": f"M√¨nh t√¨m th·∫•y s√°ch g·∫ßn gi·ªëng v·ªõi '{text_query}': '{book_match['title']}' c·ªßa {book_match.get('author', 'kh√¥ng r√µ t√°c gi·∫£')}. B·∫°n c√≥ mu·ªën mua kh√¥ng?",
                "cover": book_match.get("cover"),
                "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                "book": make_json_safe(book_match),
                "suggested": [book_match]
            })
        

        # --- N·∫øu kh√¥ng match th√¨ g·ªçi CLIP ---
        try:
            resp = requests.post(
                f"{CLIP_API_URL}/clip-match-multimodal-text",
                json={"query": text_query, "books": books},
                timeout=60
            ).json()
            top_matches = resp.get("matches", [])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi g·ªçi CLIP API: {e}")
            top_matches = []
        
        if top_matches:
            best_match = top_matches[0]
            update_session_if_new_book(best_match)
            session_data["last_suggested"] = [make_json_safe(best_match)]
            save_session_data(session_data)

            return jsonify({
                "ok": True,
                "reply": f"BooksLand c√≥ cu·ªën '{best_match['title']}' c·ªßa {best_match['author']}. B·∫°n c√≥ mu·ªën mua kh√¥ng?",
                "cover": best_match.get("cover"),
                "covers": [best_match.get("cover")] if best_match.get("cover") else [],
                "book": make_json_safe(best_match),
                "suggested": [best_match]
            })

        return jsonify({"ok": False, "reply": "Hi·ªán ch∆∞a c√≥ s√°ch ph√π h·ª£p."})

    # ================== 7. X·ª≠ l√Ω Image / Both ==================
    if pil_img:
        try:
            payload = {"books": books}
            buffered = io.BytesIO()
            pil_img.save(buffered, format="JPEG")
            img_b64 = "data:image/jpeg;base64," + base64.b64encode(buffered.getvalue()).decode()
            payload["image"] = img_b64
            if text_query:
                payload["query"] = text_query

            resp = requests.post(f"{CLIP_API_URL}/clip-match", json=payload, timeout=60).json()
            top_matches = resp.get("matches", [])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi g·ªçi CLIP API: {e}")
            top_matches = []

        if top_matches:
            best_match = top_matches[0]
            update_session_if_new_book(best_match)
            return jsonify({
                "ok": True,
                "reply": f"ƒê√¢y c√≥ ph·∫£i l√† s√°ch '{best_match['title']}' c·ªßa {best_match['author']} kh√¥ng?",
                "cover": best_match.get("cover"),
                "covers": [best_match.get("cover")] if best_match.get("cover") else [],
                "book": make_json_safe(best_match),
                "suggested": [best_match]
            })
        else:
            return jsonify({"ok": False, "reply": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s√°ch t·ª´ ·∫£nh."})

    # ================== 8. Fallback ==================
    return jsonify({
        "ok": False,
        "reply": "Kh√¥ng hi·ªÉu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i v·ªõi text ho·∫∑c ·∫£nh.",
        "cover": None,
        "covers": [],
        "book": None,
        "suggested": []
    })

# ================== API CLEAR SESSION ==================

@app.route("/debug-session")
def debug_session():
    return jsonify({"session": dict(session)})
@app.route("/api/session/clear", methods=["POST"])
def clear_session():
    clear_session_data()
    resp = jsonify({"ok": True, "msg": "Session ƒë√£ ƒë∆∞·ª£c reset."})
    resp.set_cookie("session", "", expires=0)  # xo√° cookie session
    return resp

@app.route("/")
def index():
    session.clear()
    books = list(mongo.db.books.find())
    return render_template("index.html", books=books)

@app.route("/api/books", methods=["GET"])
def get_books():
    books = list(mongo.db.books.find())
    for book in books:
        book["_id"] = str(book["_id"])
    return jsonify({"ok": True, "books": [make_json_safe(book) for book in books]})

@app.route("/api/recommended", methods=["GET"])
def get_recommended():
    books = list(mongo.db.books.find())
    recommended = random.sample(books, min(6, len(books)))
    for book in recommended:
        book["_id"] = str(book["_id"])
    return jsonify({"ok": True, "books": [make_json_safe(book) for book in recommended]})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

