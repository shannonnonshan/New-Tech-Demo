import os
import io
import base64
import random
import uuid
import requests
from PIL import Image
from flask import Flask, render_template, request, jsonify, session
from flask_pymongo import PyMongo
from dotenv import load_dotenv
import secrets
from datetime import timedelta
from bson import ObjectId
from difflib import get_close_matches

# ================== CONFIG ==================
load_dotenv()
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
# ƒê·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh MONGO_URI v√† CLIP_API_URL trong .env
MONGO_URI = os.environ.get("MONGO_URI")
CLIP_API_URL = os.environ.get("CLIP_API_URL")  # URL CLIP API

app = Flask(__name__, static_folder="static", template_folder="templates")
app.secret_key = secrets.token_hex(16)
app.config["MONGO_URI"] = MONGO_URI
app.config["SESSION_PERMANENT"] = False
mongo = PyMongo(app)

# ================== UTILS ==================
def image_from_base64(data_url):
    if "," in data_url:
        _, b64 = data_url.split(",", 1)
    else:
        b64 = data_url
    return Image.open(io.BytesIO(base64.b64decode(b64)))
    
def find_book_by_title(text_query, books):
    query_lower = text_query.lower()

    # 1. Regex tr·ª±c ti·∫øp (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    book_match = mongo.db.books.find_one({
        "title": {"$regex": text_query, "$options": "i"}
    })
    if book_match:
        return book_match

    # Chu·∫©n b·ªã danh s√°ch title (lowercase ƒë·ªÉ fuzzy match)
    all_titles = [b["title"] for b in books]
    all_titles_lower = [t.lower() for t in all_titles]

    # 2. Fuzzy match to√†n b·ªô t√™n
    close = get_close_matches(query_lower, all_titles_lower, n=1, cutoff=0.6)
    if close:
        # t√¨m l·∫°i t√™n g·ªëc kh·ªõp lowercase
        idx = all_titles_lower.index(close[0])
        return mongo.db.books.find_one({"title": all_titles[idx]})

    # 3. Fuzzy match t·ª´ng t·ª´
    words = query_lower.split()
    candidates = []
    for word in words:
        close_word = get_close_matches(word, all_titles_lower, n=3, cutoff=0.6)
        candidates.extend(close_word)

    if candidates:
        # ch·ªçn t√™n xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
        best_guess = max(set(candidates), key=candidates.count)
        idx = all_titles_lower.index(best_guess)
        return mongo.db.books.find_one({"title": all_titles[idx]})

    return None
    
def make_json_safe(obj):
    if isinstance(obj, dict):
        return {k: make_json_safe(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [make_json_safe(i) for i in obj]
    elif isinstance(obj, (str, int, float, bool)) or obj is None:
        return obj
    else:
        return str(obj)

def get_session_data():
    if "data" not in session:
        session["data"] = {}
    return session["data"]

def save_session_data(data):
    session["data"] = data

def clear_session_data():
    session.clear()  # X√≥a to√†n b·ªô session

def get_session_history():
    if "history" not in session:
        session["history"] = [
            {
                "role": "system",
                "content": (
                    "B·∫°n l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng BooksLand, nhi·ªám v·ª• h·ªó tr·ª£ kh√°ch h√†ng t√¨m s√°ch, "
                    "gi·ªõi thi·ªáu s·∫£n ph·∫©m v√† tr·∫£ l·ªùi th√¢n thi·ªán, s√∫c t√≠ch. Lu√¥n x∆∞ng l√† tr·ª£ l√Ω BooksLand."
                )
            }
        ]
    return session["history"]

def add_to_history(role, content):
    history = get_session_history()
    history.append({"role": role, "content": content})
    session["history"] = history

def call_openrouter(messages):
    if not OPENROUTER_API_KEY:
        raise Exception("‚ö†Ô∏è Ch∆∞a c√≥ OPENROUTER_API_KEY trong .env")
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {"model": "openai/gpt-4o-mini", "messages": messages}
    r = requests.post(url, headers=headers, json=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def generate_llm_reply_for_book(intent, book_data, session_history):
    """
    S·ª≠ d·ª•ng LLM ƒë·ªÉ t·∫°o ra ph·∫£n h·ªìi th√¢n thi·ªán, t·ª± nhi√™n.
    :param intent: M·ª•c ƒë√≠ch c·ªßa ng∆∞·ªùi d√πng ('price', 'in_stock', 'general_info').
    :param book_data: D·ªØ li·ªáu cu·ªën s√°ch ƒë∆∞·ª£c t√¨m th·∫•y.
    :param session_history: L·ªãch s·ª≠ h·ªôi tho·∫°i (ƒë·ªÉ LLM hi·ªÉu ng·ªØ c·∫£nh).
    :return: C√¢u tr·∫£ l·ªùi do LLM t·∫°o.
    """
    book_title = book_data.get('title', 'm·ªôt cu·ªën s√°ch')
    book_author = book_data.get('author', 'kh√¥ng r√µ t√°c gi·∫£')
    book_description = book_data.get('description', 'kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt')
    book_price = book_data.get('price', 'ch∆∞a c√≥ gi√°')

    # X√¢y d·ª±ng prompt cho LLM
    system_prompt = session_history[0]['content'] # Gi·ªØ nguy√™n system role c≈©
    
    # Chu·∫©n b·ªã context v·ªÅ s√°ch
    book_context = f"""
    TH√îNG TIN S√ÅCH ƒê∆Ø·ª¢C T√åM TH·∫§Y:
    - T·ª±a ƒë·ªÅ: {book_title}
    - T√°c gi·∫£: {book_author}
    - Gi√°: {book_price}
    - M√¥ t·∫£ t√≥m t·∫Øt: {book_description[:200]}...
    - Tr·∫°ng th√°i: C√≥ s·∫µn trong ti·ªám.
    """
    
    # Chu·∫©n b·ªã y√™u c·∫ßu c·ª• th·ªÉ
    user_request = session_history[-1]['content']
    
    if intent == 'price':
        instruction = f"Ng∆∞·ªùi d√πng h·ªèi gi√° c·ªßa s√°ch '{book_title}'. D·ª±a tr√™n th√¥ng tin S√ÅCH ƒê∆Ø·ª¢C T√åM TH·∫§Y, h√£y t·∫°o ra m·ªôt c√¢u tr·∫£ l·ªùi th√¢n thi·ªán, **ƒë∆∞a ra th√¥ng tin gi√°**, v√† h·ªèi l·∫°i xem h·ªç c√≥ mu·ªën mua kh√¥ng."
    elif intent == 'in_stock':
        instruction = f"Ng∆∞·ªùi d√πng h·ªèi ti·ªám c√≥ s√°ch '{book_title}' kh√¥ng. D·ª±a tr√™n th√¥ng tin S√ÅCH ƒê∆Ø·ª¢C T√åM TH·∫§Y, h√£y x√°c nh·∫≠n s√°ch c√≥ s·∫µn, **gi·ªõi thi·ªáu s∆° l∆∞·ª£c v·ªÅ s√°ch (t√°c gi·∫£, n·ªôi dung t√≥m t·∫Øt)** v√† h·ªèi l·∫°i xem h·ªç c√≥ mu·ªën mua kh√¥ng."
    elif intent == 'general_info':
        instruction = f"Ng∆∞·ªùi d√πng t√¨m ki·∫øm ho·∫∑c h·ªèi th√¥ng tin chung v·ªÅ s√°ch '{book_title}'. D·ª±a tr√™n th√¥ng tin S√ÅCH ƒê∆Ø·ª¢C T√åM TH·∫§Y, h√£y t√≥m t·∫Øt ng·∫Øn g·ªçn n·ªôi dung v√† h·ªèi kh√°ch c√≥ mu·ªën mua kh√¥ng. B·∫Øt ƒë·∫ßu b·∫±ng c√¢u h·ªèi x√°c nh·∫≠n: 'C√≥ ph·∫£i b·∫°n ƒëang t√¨m cu·ªën...'."
    else:
        instruction = f"Ng∆∞·ªùi d√πng v·ª´a g·ª≠i truy v·∫•n: '{user_request}'. D·ª±a tr√™n th√¥ng tin S√ÅCH ƒê∆Ø·ª¢C T√åM TH·∫§Y, h√£y t·∫°o ra m·ªôt ph·∫£n h·ªìi th√¢n thi·ªán, gi√†u th√¥ng tin v√† ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh."

    
    # X√¢y d·ª±ng messages cho LLM
    llm_messages = [
        {"role": "system", "content": system_prompt + "\n" + book_context},
        {"role": "user", "content": instruction}
    ]
    
    # Th√™m l·ªãch s·ª≠ (t·ªëi ƒëa 3 l·∫ßn t∆∞∆°ng t√°c g·∫ßn nh·∫•t) ƒë·ªÉ LLM gi·ªØ ng·ªØ c·∫£nh
    # L·∫•y 3 tin nh·∫Øn cu·ªëi (lo·∫°i tr·ª´ system prompt v√† tin nh·∫Øn hi·ªán t·∫°i)
    for msg in session_history[-4:-1]: 
        llm_messages.append(msg)

    try:
        response = call_openrouter(llm_messages)
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi g·ªçi OpenRouter/LLM: {e}")
        # Fallback c·ª©ng n·∫øu LLM l·ªói
        if intent == 'price':
            return f"üìö S√°ch '{book_title}' c·ªßa {book_author} c√≥ gi√° **{book_price}**. B·∫°n c√≥ mu·ªën mua kh√¥ng?"
        elif intent == 'in_stock':
            return f"‚úÖ C√≥ ·∫°. Trong ti·ªám c√≥ b√°n '{book_title}' c·ªßa {book_author}, n√≥i v·ªÅ {book_description[:50]}... B·∫°n c√≥ mu·ªën mua kh√¥ng?"
        else:
            return f"C√≥ ph·∫£i b·∫°n ƒëang t√¨m cu·ªën s√°ch t·ª±a ƒë·ªÅ '{book_title}' c·ªßa {book_author}? B·∫°n c√≥ mu·ªën mua kh√¥ng?"

# ================== PUSH BOOKS TO CLIP ==================
def push_books_to_clip():
    if not CLIP_API_URL:
        print("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh CLIP_API_URL, b·ªè qua push s√°ch")
        return
    try:
        # L·∫•y s√°ch t·ª´ Mongo (ch·ªâ l·∫•y id v√† title ƒë·ªÉ check)
        books = list(mongo.db.books.find({}, {"_id": 1, "title": 1}))
        if not books:
            print("‚ö†Ô∏è Mongo ch∆∞a c√≥ s√°ch, b·ªè qua push s√°ch l√™n CLIP")
            return
            
        # T·∫£i l·∫°i to√†n b·ªô d·ªØ li·ªáu s√°ch ƒë·ªÉ g·ª≠i l√™n CLIP (do CLIP API c·∫ßn nhi·ªÅu metadata)
        full_books = list(mongo.db.books.find())
        for book in full_books:
            book["_id"] = str(book["_id"])
            # CLIP API s·∫Ω t·ª± t√≠nh to√°n UUID (clip_id)
            
        resp = requests.post(CLIP_API_URL + "/clip-match-text",
                             json={"query": "dummy", "books": full_books}, timeout=120)
        
        if resp.status_code == 200:
            print(f"‚úÖ ƒê√£ push {len(full_books)} s√°ch l√™n CLIP API th√†nh c√¥ng")
        else:
            print(f"‚ö†Ô∏è L·ªói khi push s√°ch: {resp.status_code}, {resp.text[:200]}")
    except Exception as e:
        print(f"‚ö†Ô∏è Exception khi push s√°ch l√™n CLIP: {e}")

# Ch·ªâ ch·∫°y khi module ƒë∆∞·ª£c load
push_books_to_clip()

# ================== ROUTES ==================
@app.route("/api/query", methods=["POST"])
def api_query():
    pil_img = None
    text_query = ""

    # ================== 0. Nh·∫≠n input ==================
    if request.is_json:
        body = request.get_json() or {}
        text_query = (body.get("query") or "").strip()
        if body.get("image"):
            pil_img = image_from_base64(body["image"]).convert("RGB")
    else:
        body = request.form
        text_query = (body.get("query") or "").strip()
        if "file" in request.files:
            pil_img = Image.open(request.files["file"].stream).convert("RGB")

    # ================== 1. Reset session ==================
    if text_query.lower() == "reset":
        clear_session_data()
        return jsonify({"ok": True, "reply": "Session ƒë√£ ƒë∆∞·ª£c reset."})

    # ================== 2. Ph√¢n lo·∫°i input ==================
    input_type = "unknown"
    if pil_img and text_query:
        input_type = "both"
    elif pil_img:
        input_type = "image"
    elif text_query:
        input_type = "text"

    # ================== 3. Load s√°ch t·ª´ Mongo ==================
    books = list(mongo.db.books.find())
    for book in books:
        book["_id"] = str(book["_id"])

    session_data = get_session_data()

    # ================== 4. Helper session ==================
    def update_session_if_new_book(book):
        last_match = session_data.get("last_best_match")
        if not last_match or str(last_match.get("_id")) != str(book.get("_id")):
            session_data["last_best_match"] = make_json_safe(book)
            save_session_data(session_data)

    # ================== 5. Greeting intent ==================
    greetings = ["hi", "hello", "ch√†o", "hey", "xin ch√†o"]
    if text_query.lower() in greetings:
        add_to_history("user", text_query)
        reply = "Ch√†o b·∫°n üëã! M√¨nh l√† tr·ª£ l√Ω BooksLand, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s√°ch ho·∫∑c gi·ªõi thi·ªáu s·∫£n ph·∫©m."
        add_to_history("assistant", reply)
        return jsonify({
            "ok": True,
            "reply": reply,
            "cover": None,
            "covers": [],
            "book": None,
            "suggested": []
        })

    # ================== 6. X·ª≠ l√Ω Text-only ==================
    if text_query and not pil_img:
        query_lower = text_query.lower()

        # --- X·ª≠ l√Ω x√°c nh·∫≠n "c√≥" (mua/x√°c nh·∫≠n) ---
        confirm_words_yes = ["c√≥", "ƒë√∫ng r·ªìi", "ok", "mua", "chu·∫©n", "ph·∫£i"]
        if query_lower in confirm_words_yes:
            last_book = session_data.get("last_best_match")
            if last_book:
                book_in_store = mongo.db.books.find_one({"_id": ObjectId(last_book["_id"])})
                if book_in_store:
                    book_in_store["_id"] = str(book_in_store["_id"])
                    
                    # LLM t·∫°o ph·∫£n h·ªìi x√°c nh·∫≠n mua (ho·∫∑c th√¥ng tin)
                    add_to_history("user", text_query)
                    # Gi·∫£ ƒë·ªãnh ƒë√¢y l√† x√°c nh·∫≠n th√¥ng tin chung ho·∫∑c s·∫µn s√†ng mua
                    llm_reply = generate_llm_reply_for_book("in_stock", book_in_store, get_session_history()) 
                    add_to_history("assistant", llm_reply)
                    
                    return jsonify({
                        "ok": True,
                        "reply": llm_reply,
                        "cover": book_in_store.get("cover"),
                        "covers": [book_in_store.get("cover")] if book_in_store.get("cover") else [],
                        "book": make_json_safe(book_in_store),
                        "suggested": []
                    })
            return jsonify({"ok": False, "reply": "B·∫°n mu·ªën mua s√°ch n√†o nh·ªâ? H√£y ch·ªçn l·∫°i nh√©."})

        # --- X·ª≠ l√Ω x√°c nh·∫≠n "kh√¥ng" (b·ªè qua/t·ª´ ch·ªëi) ---
        confirm_words_no = ["kh√¥ng", "kh√¥ng mua", "kh√¥ng ph·∫£i", "sai", "nh·∫ßm"]
        if query_lower in confirm_words_no:
            last_suggested = session_data.get("last_suggested", [])
            reply = ""
            if last_suggested:
                reply = "Kh√¥ng sao üòä. B·∫°n th·ª≠ xem th√™m m·∫•y cu·ªën n√†y nh√©:"
            else:
                reply = "V·∫≠y m√¨nh c√≥ th·ªÉ g·ª£i √Ω v√†i cu·ªën kh√°c cho b·∫°n kh√¥ng?"
            
            add_to_history("user", text_query)
            add_to_history("assistant", reply)
            
            return jsonify({
                "ok": True,
                "reply": reply,
                "cover": last_suggested[0].get("cover") if last_suggested and last_suggested[0].get("cover") else None,
                "covers": [b.get("cover") for b in last_suggested if b.get("cover")],
                "book": None,
                "suggested": last_suggested
            })

        # --- X·ª≠ l√Ω h·ªèi gi√° ---
        price_keywords = ["gi√°", "cost", "bao nhi√™u", "m·∫•y ti·ªÅn", "gi√° bao nhi√™u", "nhi√™u"]
        if any(word in query_lower for word in price_keywords):
            add_to_history("user", text_query) # Th√™m v√†o l·ªãch s·ª≠ tr∆∞·ªõc khi g·ªçi LLM
            
            last_book = session_data.get("last_best_match")
            book_match = find_book_by_title(text_query, books)

            if book_match:
                book_match["_id"] = str(book_match["_id"])
                update_session_if_new_book(book_match)
                session_data["last_suggested"] = [make_json_safe(book_match)]
                save_session_data(session_data)
                
                # G·ªçi LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi t·ª± nhi√™n
                reply = generate_llm_reply_for_book("price", book_match, get_session_history())
                add_to_history("assistant", reply) # L∆∞u ph·∫£n h·ªìi LLM v√†o l·ªãch s·ª≠

                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": book_match.get("cover"),
                    "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                    "book": make_json_safe(book_match),
                    "suggested": [book_match]
                })
            elif last_book:
                # Kh√¥ng nh·∫Øc t√™n m·ªõi nh∆∞ng ƒë√£ c√≥ s√°ch tr∆∞·ªõc ƒë√≥ => b√°o gi√° t·ª´ session
                reply = generate_llm_reply_for_book("price", last_book, get_session_history())
                add_to_history("assistant", reply)

                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": last_book.get("cover"),
                    "covers": [last_book.get("cover")] if last_book.get("cover") else [],
                    "book": make_json_safe(last_book),
                    "suggested": [last_book]
                })
            else:
                reply = "Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y s√°ch n√†o g·∫ßn gi·ªëng ƒë·ªÉ b√°o gi√°."
                add_to_history("assistant", reply)
                return jsonify({
                    "ok": False,
                    "reply": reply
                })

        # --- X·ª≠ l√Ω h·ªèi c√≥ b√°n kh√¥ng ---
        if "c√≥ b√°n" in query_lower or "c√≥ s√°ch" in query_lower or "trong ti·ªám c√≥" in query_lower:
            add_to_history("user", text_query)

            book_match = find_book_by_title(text_query, books)
            if book_match:
                book_match["_id"] = str(book_match["_id"])
                update_session_if_new_book(book_match)
                
                # G·ªçi LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi x√°c nh·∫≠n v√† gi·ªõi thi·ªáu s∆° l∆∞·ª£c
                reply = generate_llm_reply_for_book("in_stock", book_match, get_session_history())
                add_to_history("assistant", reply)

                return jsonify({
                    "ok": True,
                    "reply": reply,
                    "cover": book_match.get("cover"),
                    "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                    "book": make_json_safe(book_match),
                    "suggested": []
                })
            # N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng regex, s·∫Ω chuy·ªÉn xu·ªëng t√¨m ki·∫øm chung

        # === START: X·ª¨ L√ù G·ª¢I √ù S√ÅCH THEO M√ÄU B√åA (M·ªõi) ===
        color_keywords_vi = ["m√†u ƒë·ªè", "m√†u xanh", "m√†u v√†ng", "m√†u tr·∫Øng", "m√†u ƒëen", 
                             "m√†u cam", "m√†u t√≠m", "m√†u h·ªìng", "m√†u n√¢u", "m√†u x√°m",
                             "b√¨a ƒë·ªè", "b√¨a xanh", "b√¨a v√†ng", "b√¨a tr·∫Øng", "b√¨a ƒëen"]
        
        # Ki·ªÉm tra n·∫øu query c√≥ ch·ª©a t·ª´ kh√≥a m√†u s·∫Øc
        if any(kw in query_lower for kw in color_keywords_vi):
            add_to_history("user", text_query)
            try:
                # G·ªçi API m·ªõi: /clip-match-color-multimodal
                print(f"-> G·ªçi CLIP API theo m√†u s·∫Øc: {text_query}")
                resp = requests.post(
                    f"{CLIP_API_URL}/clip-match-color-multimodal",
                    json={"query": text_query},
                    timeout=60
                ).json()
                top_matches = resp.get("suggested", [])
                detected_color = resp.get("detected_color")

                if top_matches:
                    best_match = top_matches[0]
                    update_session_if_new_book(best_match)
                    session_data["last_suggested"] = [make_json_safe(b) for b in top_matches]
                    save_session_data(session_data)
                    
                    # T·∫°o ph·∫£n h·ªìi c·ªë ƒë·ªãnh cho danh s√°ch s√°ch
                    book_list_str = "\n".join([f"- **{b['title']}** ({b['author']})" for b in top_matches])
                    color_name = detected_color if detected_color else "b√¨a"
                    reply = f"D·ª±a tr√™n y√™u c·∫ßu t√¨m ki·∫øm s√°ch b√¨a **{color_name}** c·ªßa b·∫°n, BooksLand t√¨m ƒë∆∞·ª£c c√°c cu·ªën sau:\n{book_list_str}\n\nB·∫°n c√≥ mu·ªën m√¨nh gi·ªõi thi·ªáu chi ti·∫øt cu·ªën n√†o kh√¥ng?"

                    add_to_history("assistant", reply)

                    return jsonify({
                        "ok": True,
                        "reply": reply,
                        "cover": best_match.get("cover"),
                        "covers": [b.get("cover") for b in top_matches if b.get("cover")],
                        "book": make_json_safe(best_match),
                        "suggested": top_matches
                    })
                
                # N·∫øu kh√¥ng t√¨m th·∫•y s√°ch n√†o theo m√†u
                reply = "Xin l·ªói, m√¨nh ƒë√£ th·ª≠ t√¨m s√°ch theo m√†u b√¨a nh∆∞ng ch∆∞a th·∫•y cu·ªën n√†o ph√π h·ª£p. B·∫°n th·ª≠ t√¨m theo t√™n s√°ch ho·∫∑c th·ªÉ lo·∫°i nh√©."
                add_to_history("assistant", reply)
                return jsonify({"ok": False, "reply": reply})

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi g·ªçi CLIP API Color Search: {e}")
                # Fallback v·ªÅ t√¨m ki·∫øm chung b√™n d∆∞·ªõi n·∫øu API l·ªói
                pass 
        
        # === END: X·ª¨ L√ù G·ª¢I √ù S√ÅCH THEO M√ÄU B√åA ===

        # --- X·ª≠ l√Ω t√¨m ki·∫øm chung (Regex + Fuzzy) ---
        book_match = find_book_by_title(text_query, books)

        if book_match:
            add_to_history("user", text_query)

            book_match["_id"] = str(book_match["_id"])
            update_session_if_new_book(book_match)
            session_data["last_suggested"] = [make_json_safe(book_match)]
            save_session_data(session_data)
            
            # G·ªçi LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi x√°c nh·∫≠n v√† gi·ªõi thi·ªáu
            reply = generate_llm_reply_for_book("general_info", book_match, get_session_history())
            add_to_history("assistant", reply)

            return jsonify({
                "ok": True,
                "reply": reply,
                "cover": book_match.get("cover"),
                "covers": [book_match.get("cover")] if book_match.get("cover") else [],
                "book": make_json_safe(book_match),
                "suggested": [book_match]
            })
        
        # --- N·∫øu kh√¥ng match th√¨ g·ªçi CLIP (Text-based Semantic Search) ---
        try:
            resp = requests.post(
                f"{CLIP_API_URL}/clip-match-multimodal-text",
                json={"query": text_query, "books": books},
                timeout=60
            ).json()
            top_matches = resp.get("matches", [])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi g·ªçi CLIP API Multimodal Search: {e}")
            top_matches = []
        
        if top_matches:
            add_to_history("user", text_query)

            best_match = top_matches[0]
            update_session_if_new_book(best_match)
            session_data["last_suggested"] = [make_json_safe(best_match)]
            save_session_data(session_data)
            
            # G·ªçi LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi x√°c nh·∫≠n v√† gi·ªõi thi·ªáu d·ª±a tr√™n CLIP match
            reply = generate_llm_reply_for_book("general_info", best_match, get_session_history())
            add_to_history("assistant", reply)

            return jsonify({
                "ok": True,
                "reply": reply,
                "cover": best_match.get("cover"),
                "covers": [best_match.get("cover")] if best_match.get("cover") else [],
                "book": make_json_safe(best_match),
                "suggested": [best_match]
            })

        reply = "Hi·ªán ch∆∞a c√≥ s√°ch ph√π h·ª£p."
        add_to_history("user", text_query)
        add_to_history("assistant", reply)
        return jsonify({"ok": False, "reply": reply})

    # ================== 7. X·ª≠ l√Ω Image / Both ==================
    if pil_img:
        # X·ª≠ l√Ω input ·∫£nh
        try:
            payload = {"books": books}
            buffered = io.BytesIO()
            pil_img.save(buffered, format="JPEG")
            img_b64 = "data:image/jpeg;base64," + base64.b64encode(buffered.getvalue()).decode()
            payload["image"] = img_b64
            if text_query:
                payload["query"] = text_query
                
            resp = requests.post(f"{CLIP_API_URL}/clip-match", json=payload, timeout=60).json()
            top_matches = resp.get("matches", [])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi g·ªçi CLIP API (Image): {e}")
            top_matches = []

        if top_matches:
            best_match = top_matches[0]
            update_session_if_new_book(best_match)
            
            # Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ (d√π l√† ·∫£nh)
            add_to_history("user", f"[IMAGE] {text_query if text_query else '(T√¨m s√°ch qua ·∫£nh)'}")

            # LLM t·∫°o ph·∫£n h·ªìi x√°c nh·∫≠n cho k·∫øt qu·∫£ t√¨m ki·∫øm qua ·∫£nh
            reply = generate_llm_reply_for_book("general_info", best_match, get_session_history())
            add_to_history("assistant", reply)
            
            return jsonify({
                "ok": True,
                "reply": reply,
                "cover": best_match.get("cover"),
                "covers": [best_match.get("cover")] if best_match.get("cover") else [],
                "book": make_json_safe(best_match),
                "suggested": [best_match]
            })
        else:
            reply = "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s√°ch t·ª´ ·∫£nh."
            add_to_history("user", f"[IMAGE] {text_query if text_query else '(T√¨m s√°ch qua ·∫£nh)'}")
            add_to_history("assistant", reply)
            return jsonify({"ok": False, "reply": reply})

    # ================== 8. Fallback ==================
    reply = "Kh√¥ng hi·ªÉu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i v·ªõi text ho·∫∑c ·∫£nh."
    add_to_history("user", text_query)
    add_to_history("assistant", reply)
    return jsonify({
        "ok": False,
        "reply": reply,
        "cover": None,
        "covers": [],
        "book": None,
        "suggested": []
    })

# ================== API CLEAR SESSION ==================

@app.route("/debug-session")
def debug_session():
    return jsonify({"session": dict(session)})
    
@app.route("/api/session/clear", methods=["POST"])
def clear_session():
    clear_session_data()
    resp = jsonify({"ok": True, "msg": "Session ƒë√£ ƒë∆∞·ª£c reset."})
    resp.set_cookie("session", "", expires=0)  # xo√° cookie session
    return resp

@app.route("/")
def index():
    session.clear()
    books = list(mongo.db.books.find())
    return render_template("index.html", books=books)

@app.route("/api/books", methods=["GET"])
def get_books():
    books = list(mongo.db.books.find())
    for book in books:
        book["_id"] = str(book["_id"])
    return jsonify({"ok": True, "books": [make_json_safe(book) for book in books]})

@app.route("/api/recommended", methods=["GET"])
def get_recommended():
    books = list(mongo.db.books.find())
    recommended = random.sample(books, min(6, len(books)))
    for book in recommended:
        book["_id"] = str(book["_id"])
    return jsonify({"ok": True, "books": [make_json_safe(book) for book in recommended]})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)